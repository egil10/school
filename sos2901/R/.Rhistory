library(tidyverse)
library(skimr)
library(rpart)
library(fairmodels)
install.packages("fairmodels")
library(randomForest)
library(caret)
library(tidyverse)
library(skimr)
library(rpart)
library(fairmodels)
library(randomForest)
library(caret)
library(tidyverse)
library(skimr)
library(rpart)
library(fairmodels)
library(randomForest)
library(caret)
compas <- readRDS("data/compas.rds")
compas
compas <- readRDS("data/compas.rds") %>%
as_tibble()
compas
set.seed(4356)
rf1 <- randomForest(Two_yr_Recidivism~.,
data = compas)
rf1
plot(rf1)
pred4 <- compas %>%
mutate(predrf = predict(rf1))
tab <- table(
pred4$predrf,
pred4$Two_yr_Recidivism
)
tab4 <- table(
pred4$predrf,
pred4$Two_yr_Recidivism
)
tab4
confusionMatrix(tab4, positive = "1")
rf2 <- randomForest(Two_yr_Recidivism~.,
ntree = 1500,
data = compas)
plot(rf2)
abline(v=500, col="grey")
rf3 <- randomForest(Two_yr_Recidivism~.,
mtry = 4,
data = compas)
rf3
rf4 <- randomForest(Two_yr_Recidivism~.,
importance = TRUE,
data = compas)
rf4
varImpPlot(rf4, type = !)
varImpPlot(rf4, type = 1)
partialPlot(rf4,
pred.data = compas,
x.var = Number_of_Priors,
which.class = 1)
partialPlot(rf4,
pred.data = compas,
x.var = Number_of_Priors,
which.class = 1)
partialPlot(rf1,
pred.data = compas,
x.var = Number_of_Priors,
which.class = 1)
compas <- readRDS("data/compas.rds")
partialPlot(rf1,
pred.data = compas,
x.var = Number_of_Priors,
which.class = 1)
compas <- readRDS("data/compas.rds")
compas
compas %>% glimpse()
set.seed(4356)
rf <-
randomForest(Two_yr_Recidivism~.,
data = compas)
rf1 <-
randomForest(Two_yr_Recidivism~.,
data = compas)
pred1 <-
compas %>%
mutate(pred_rf = predict(rf1))
confusionMatrix(
pred1$pred_rf,
pred1$Two_yr_Recidivism,
positive = "1"
)
menn <- pred1 %>%
filter(Sex == "Male")
male <- pred1 %>%
filter(Sex == "Male")
confusionMatrix(
male$pred_rf,
male$Two_yr_Recidivism,
positive = "1"
)
female <- pred1 %>%
filter(Sex == "Female")
confusionMatrix(
female$pred_rf,
female$Two_yr_Recidivism,
positive = "1"
)
acc1 <- acc_parity(data = pred1,
outcome = 'Two_yr_Recidivism',
group = 'Sex',
preds = 'pred_rf',
base = 'Female')
acc1
strat1 <- compas %>%
mutate(strat = paste0(Sex, Two_yr_Recidivism)) %>%
pull(strat)
table(strat1)
set.seed(45)
rf <- randomForest(Two_yr_Recidivism ~ .,
data = compas,
strata = strat,
sampsize = c(215, 290, 1500, 1500),
ntree=800)
rf <- randomForest(Two_yr_Recidivism ~ .,
data = compas,
strata = strat1,
sampsize = c(215, 290, 1500, 1500),
ntree=800)
compas_p <- compas %>%
mutate(pred_rf = predict(rf))
acc <- acc_parity(data = compas_p,
outcome      = 'Two_yr_Recidivism',
group        = 'Sex',
preds        = 'pred_rf',
base         = 'Female')
acc[[2]]
acc <- acc_parity(data = compas_p,
outcome      = 'Two_yr_Recidivism',
group        = 'Ethnicity',
preds        = 'pred_rf',
base         = 'Caucasian')
acc[[2]]
strat <- compas %>%
mutate(strat = paste0(Sex, Ethnicity, Two_yr_Recidivism)) %>%
pull(strat)
table(strat)
table(strat)
strat <- compas %>%
mutate(caucasian = ifelse(Ethnicity == "Caucasian", "Caucasian", "Other")) %>%
mutate(strat = paste0(Sex, caucasian, Two_yr_Recidivism)) %>%
pull(strat)
table(strat)
set.seed(45)
rf <- randomForest(Two_yr_Recidivism ~ .,
data = compas,
strata = strat,
sampsize = c(120, 120,
200, 200,
400, 400,
900, 900),
ntree=800)
rf
compas_p <- compas %>%
mutate(pred_rf = predict(rf))
acc <- acc_parity(data = compas_p,
outcome      = 'Two_yr_Recidivism',
group        = 'Sex',
preds        = 'pred_rf',
base         = 'Female')
acc[[2]]
acc <- acc_parity(data = compas_p,
outcome      = 'Two_yr_Recidivism',
group        = 'Ethnicity',
preds        = 'pred_rf',
base         = 'Caucasian')
acc[[2]]
library(tidyverse)
library(rsample)
library(gbm)
library(caret)
library(fairness)
library(gtsummary)
compas <- read_rds("data/compas.rds")
compas
compas %>%
mutate(Two_yr_Recidivism =
ifelse(Two_yr_Recidivism == "1",
1, 0)) %>%
na.omit()
compas <- read_rds("data/compas.rds") %>%
mutate(Two_yr_Recidivism =
ifelse(Two_yr_Recidivism == "1",
1, 0)) %>%
na.omit()
compas %>% glimpse()
set.seed(42)
int <- initial_split(compas)
training <- training(int)
testing <- testint(int)
testing <- testing(int)
set.seed(542)
gbm1 <- gbm(formula = Two_yr_Recidivism~.,
data = training,
distribution = "bernoulli",
n.trees = 4000,
interaction.depth = 3,
n.minobsinnode = 1,
shrinkage = 0.001,
bag.fraction = 0.5)
library(tidyverse)
library(rsample)
library(gbm)
library(caret)
library(fairness)
library(gtsummary)
library(gbm)
library(tidyverse)
library(rsample)
library(gbm)
library(caret)
library(fairness)
library(gtsummary)
compas <- read_rds("data/compas.rds") %>%
mutate(Two_yr_Recidivism =
ifelse(Two_yr_Recidivism == "1",
1, 0)) %>%
na.omit()
compas %>% glimpse()
set.seed(42)
int <- initial_split(compas)
training <- training(int)
testing <- testing(int)
# 9.1
set.seed(542)
gbm1 <- gbm(formula = Two_yr_Recidivism~.,
data = training,
distribution = "bernoulli",
n.trees = 4000,
interaction.depth = 3,
n.minobsinnode = 1,
shrinkage = 0.001,
bag.fraction = 0.5)
gbm1
gbm1 %>%
gbm.perf(oobag.curve = TRUE,
method = "OOB",
plot.it = TRUE,
overlay = TRUE)
gbm1 %>%
gbm.perf(oobag.curve = TRUE,
method = "OOB",
plot.it = T,
overlay = T)
sum1 <-
gbm1 %>% summary(method = permutation.test.gbm,
normalize = TRUE,
plotit = FALSE)
sum1 %>%
ggplot(aes(x = reorder(var, rel.inf),
y = rel.inf)) +
geom_col()
sum1 %>%
ggplot(aes(x = reorder(var, rel.inf),
y = rel.inf)) +
geom_col() +
coord_flip()
plot(gbm1, 'n of priors', type = "response")
plot(gbm1, 'Number_of_priors', type = "response")
plot(gbm1, 'Number_of_Priors', type = "response")
plot(gbm1, 'Age_Below_TwentyFive', type = "response")
plot(gbm1, "Ethnicity", type = "response")
gbm1 %>% colnames()
gbm1
gbm1$call
compas
compas %>% colnames()
[compas %>% colnames()]
compas %>% colnames()
list(compas %>% colnames())
print(i)
for (i in list(compas %>% colnames())) {
print(i)
}
plot(gbm1, i, type = "response")
for (i in list(compas %>% colnames())) {
plot(gbm1, i, type = "response")
}
for (i in compas %>% colnames()) {
plot(gbm1, i, type = "response")
}
for (i in compas %>% colnames()) {
plot(gbm1, i, type = "response")
}
compas %>% colnames()
for (i in compas %>% colnames()) {
plot(gbm1, i, type = "response")
}
prd <-
setdiff(colnames(compas),
"Two_yr_Recidivism")
}
for (i in prd) {
plot(gbm1,
var,
type = "response",
main = paste("Effect of", var))
}
cls
for (i in prd) {
plot(gbm1,
i,
type = "response",
main = paste("Effect of", i))
}
for (i in prd) {
plot(gbm1,
i,
type = "response",
main = paste("Effect of", i))
}
for (i in prd) {
dev.new()  # opens a new plotting window
plot(gbm1,
i,
type = "response",
main = paste("Effect of", i))
}
for (i in prd) {
plot(gbm1,
i,
type = "response",
main = paste("Effect of", i))
}
pdf("gbm_partial_dependence_plots.pdf", width = 7, height = 5)
for (i in prd) {
plot(gbm1,
i,
type = "response",
main = paste("Effect of", i))
}
dev.off()
for (i in prd) {
plot(gbm1,
i,
type = "response",
main = paste("Effect of", i))
}
pred1 <- training %>%
mutate(pred =
predict(gbm1, type = "response"),
class =
ifelse(pred > .5, 1, 0))
tab1 <- table(
pred1$class,
training$Two_yr_Recidivism
)
tab1
confusionMatrix(tab1)
confusionMatrix(tab1,
positive = "1")
wts <- training %>%
mutate(wts =
ifelse(Two_yr_Recidivism == 1, 1, 2)) %>%
pull(wts)
wts
set.seed(542)
gbm2 <- gbm(Two_yr_Recidivism~.,
data = training,
weights = wts,
distribution = "bernoulli",
n.trees = 4000,
interaction.depth = 3,
n.minobsinnode = 1,
shrinkage = 0.001,
bag.fraction = 0.5)
gbm2
pred2 <- training %>%
mutate(
pred =
predict(gbm2, type = "response"),
class =
ifelse(pred > 0.5, 1, 0)
)
pred23
pred2
tab2 <- table(
pred2$class,
training$Two_yr_Recidivism
)
tab2
acc1 <- fairness::acc_parity(
data = pred2,
outcome = 'Two_yr_Recidivism',
group = 'Sex',
preds = 'class',
base = 'Female'
)
acc1
training %>%
tbl_cross(
row = Sex,
col = Two_yr_Recidivism
)
wts <- training %>%
mutate(wts1 = case_when(
Sex == "Male" & Two_yr_Recidivism == 0 ~ 1,
Sex == "Male" & Two_yr_Recidivism == 1 ~ 2,
Sex == "Female" & Two_yr_Recidivism == 0 ~ 2,
Sex == "Female" & Two_yr_Recidivism == 1 ~ 4)) %>%
pull(wts1)
library(gtsummary)
df <- training %>%
mutate(wts = factor(wts))
wts <- training %>%
mutate(wts1 = case_when(
Sex == "Male" & Two_yr_Recidivism == 0 ~ 1,
Sex == "Male" & Two_yr_Recidivism == 1 ~ 2,
Sex == "Female" & Two_yr_Recidivism == 0 ~ 2,
Sex == "Female" & Two_yr_Recidivism == 1 ~ 4)) %>%
pull(wts1)
library(gtsummary)
df <- training %>%
mutate(wts = factor(wts))
df %>%
select(Sex, Two_yr_Recidivism, wts) %>%
tbl_strata(
strata = Sex,
~.x %>%
tbl_summary(
by = Two_yr_Recidivism,
#type = everything()~"categorical",
statistic = all_categorical() ~ "{n}"
)
)
source("C:/Users/ofurn/Dokumenter/Github/school/sos2901/R/boostin.R")
install.packages("directlabels")
install.packages("dendextend")
library(directlabels)
library(tidyverse)
library(skimr)
library(rsample)
library(dendextend)
library(directlabels)
library(tidyverse)
library(skimr)
library(rsample)
library(dendextend)
library(directlabels)
wss <- 0
# For 1 to 15 cluster centers
for (i in 1:5) {
km.out <- kmeans(df, centers = i, nstart=20)
# Save total within sum of squares to wss variable
wss[i] <- km.out$tot.withinss
}
# Plot total within sum of squares vs. number of clusters
plot(1:5, wss, type = "b",
xlab = "Number of Clusters",
ylab = "Within groups sum of squares")
# Marker "albuen" med en linje i plottet
abline(v=3, col="red")
wss <- 0
# For 1 to 15 cluster centers
for (i in 1:5) {
km.out <- kmeans(df, centers = i, nstart=20)
# Save total within sum of squares to wss variable
wss[i] <- km.out$tot.withinss
}
kommune <- readRDS("data/kommunedata.rds")
kommune
kommune <- readRDS("data/kommunedata.rds") %>%
filter(year == 2020) %>%
mutate(kommune =
ifelse(kommune == "Oslo municipality",
"Oslo", kommune)) %>%
select(kommune, menn_18_25:menn_18min,
inntekt_totalt_median:andre_lovbrudd) %>%
select(-inntekt_eskatt_median) %>%
column_to_rownames(var = "kommune")
kommune
library(GGally)
ggpairs(kommune[, c(1,3,6,7,8,10,11)])
library(stats)
prk1 <- prcomp(kommune,
scale. = TRUE,
center = TRUE)
prk1 %>% summarise()
prk1 %>% summary()
par(mar=c(2,1,2,1))
biplot(prk1,
cex = .4,
cex.axis = .6,
cex.lab = .6)
prk1$rotation[,1:2]
prk1$x %>% head()
pvar <- prk1$sdev^2
pve <- pvar/sum(pvar)
dt <- data_frame(
components = 1:length(pve),
prop_var_expl = pve
)
dt <- data.frame(
components = 1:length(pve),
prop_var_expl = pve
)
dt %>%
ggplot(aes(x = components,
y = prop_var_expl)) +
geom_line() +
geom_point()
class(x = kommune)
prk1 %>% class()
